version: '3.8'

services:
  # Production overrides
  app:
    restart: always
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
    environment:
      - NODE_ENV=production
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
        
  # MongoDB with replica set for production
  mongodb:
    command: ["--replSet", "rs0", "--bind_ip_all"]
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init-scripts:/docker-entrypoint-initdb.d
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Redis with persistence for production
  redis:
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
        
  # Auth service production settings
  auth-service:
    image: ancestry-chain/auth-service:${APP_VERSION:-latest}
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
      target: production
    restart: always
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - MONGODB_URI=mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongodb:27017/${MONGO_DB}?authSource=admin&replicaSet=rs0
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=1h
      - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}
      - REFRESH_TOKEN_EXPIRES_IN=7d
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:4001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
        
  # GEDCOM service production settings
  gedcom-service:
    image: ancestry-chain/gedcom-service:${APP_VERSION:-latest}
    build:
      context: ./services/gedcom-service
      dockerfile: Dockerfile
      target: production
    restart: always
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - MONGODB_URI=mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongodb:27017/${MONGO_DB}?authSource=admin&replicaSet=rs0
      - REDIS_URI=redis://:${REDIS_PASSWORD}@redis:6379
    volumes:
      - upload_data:/app/uploads
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:4002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Verification service production settings
  verification-service:
    image: ancestry-chain/verification-service:${APP_VERSION:-latest}
    build:
      context: ./services/verification-service
      dockerfile: Dockerfile
      target: production
    restart: always
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '1'
          memory: 1G
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - MONGODB_URI=mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongodb:27017/${MONGO_DB}?authSource=admin&replicaSet=rs0
      - REDIS_URI=redis://:${REDIS_PASSWORD}@redis:6379
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:4003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Payment service production settings
  payment-service:
    image: ancestry-chain/payment-service:${APP_VERSION:-latest}
    build:
      context: ./services/payment-service
      dockerfile: Dockerfile
      target: production
    restart: always
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - MONGODB_URI=mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongodb:27017/${MONGO_DB}?authSource=admin&replicaSet=rs0
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - ETH_RPC_URL=${ETH_RPC_URL}
      - ETH_CHAIN_ID=${ETH_CHAIN_ID}
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:4004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # NFT service production settings
  nft-service:
    image: ancestry-chain/nft-service:${APP_VERSION:-latest}
    build:
      context: ./services/nft-service
      dockerfile: Dockerfile
      target: production
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - MONGODB_URI=mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongodb:27017/${MONGO_DB}?authSource=admin&replicaSet=rs0
      - ETH_RPC_URL=${ETH_RPC_URL}
      - NFT_CONTRACT_ADDRESS=${NFT_CONTRACT_ADDRESS}
      - ETH_PRIVATE_KEY=${ETH_PRIVATE_KEY}
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:4005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Storage service production settings
  storage-service:
    image: ancestry-chain/storage-service:${APP_VERSION:-latest}
    build:
      context: ./services/storage-service
      dockerfile: Dockerfile
      target: production
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - MONGODB_URI=mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongodb:27017/${MONGO_DB}?authSource=admin&replicaSet=rs0
      - ARDRIVE_WALLET_FILE=${ARDRIVE_WALLET_FILE}
      - ARDRIVE_WALLET_PASSWORD=${ARDRIVE_WALLET_PASSWORD}
    volumes:
      - upload_data:/app/uploads
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:4006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # ZKP service production settings
  zkp-service:
    image: ancestry-chain/zkp-service:${APP_VERSION:-latest}
    build:
      context: ./services/zkp-service
      dockerfile: Dockerfile
      target: production
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - MONGODB_URI=mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongodb:27017/${MONGO_DB}?authSource=admin&replicaSet=rs0
      - ALEO_PROGRAM_ID=${ALEO_PROGRAM_ID}
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:4007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Workers production settings
  verification-worker:
    image: ancestry-chain/verification-worker:${APP_VERSION:-latest}
    build:
      context: ./workers/verification-worker
      dockerfile: Dockerfile
      target: production
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - MONGODB_URI=mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongodb:27017/${MONGO_DB}?authSource=admin&replicaSet=rs0
      - REDIS_URI=redis://:${REDIS_PASSWORD}@redis:6379
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  payment-worker:
    image: ancestry-chain/payment-worker:${APP_VERSION:-latest}
    build:
      context: ./workers/payment-worker
      dockerfile: Dockerfile
      target: production
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - MONGODB_URI=mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongodb:27017/${MONGO_DB}?authSource=admin&replicaSet=rs0
      - REDIS_URI=redis://:${REDIS_PASSWORD}@redis:6379
      - ETH_RPC_URL=${ETH_RPC_URL}
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Monitoring services
  prometheus:
    image: prom/prometheus:latest
    restart: always
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    networks:
      - ancestry-network

  grafana:
    image: grafana/grafana:latest
    restart: always
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin_password}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3002:3000"
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    networks:
      - ancestry-network

volumes:
  upload_data:
  prometheus_data:
  grafana_data:
